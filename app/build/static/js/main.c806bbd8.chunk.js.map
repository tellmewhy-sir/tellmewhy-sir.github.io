{"version":3,"sources":["enum/robotTypes.js","robot.js","components/RobotTypeSelect.js","components/CreateBotForm.js","robot.svg","components/Bot.js","base.js","enum/tasks.js","App.js","serviceWorker.js","index.js"],"names":["robotTypes","UNIPEDAL","BIPEDAL","QUADRUPEDAL","ARACHNID","RADIAL","AERONAUTICAL","RobotFactory","Object","classCallCheck","this","count","id","_ref","name","type","tasks","Error","TYPES","Robot","_ref2","taskCount","keys","length","tasksArr","Array","isArray","i","task","key","concat","taskObj","types","indexOf","taskId","cb","_this","objectSpread","console","log","setTimeout","eta","RobotTypeSelect","props","options","map","react_default","a","createElement","value","className","onChange","handleChange","CreateBotForm","htmlFor","placeholder","robotName","handleInputChange","showRequired","components_RobotTypeSelect","robotType","handleSelectChange","robotAmnt","onClick","handleClick","_extends","assign","target","arguments","source","prototype","hasOwnProperty","call","apply","robot_ref","x","y","width","height","rx","cx","cy","r","d","robot_SvgComponent","version","xmlnsXlink","Bot","__webpack_require__","p","state","showLeaderBoard","setState","hideLeaderBoard","_this2","data","tasksList","filter","bubbleText","description","bubbleClass","animationName","isValidTask","react_transition_group","classNames","timeout","leaderboard","completeTasks","assignTasks","deleteRobot","Component","firebaseApp","firebase","initializeApp","apiKey","authDomain","databaseURL","base","Rebase","createClass","database","enum_tasks","Factory","ID","Math","random","toString","substr","App","possibleConstructorReturn","getPrototypeOf","addBot","botObj","botKey","push","then","err","update","defineProperty","timers","deleteBot","remove","updateBot","e","handleCreateFormSubmit","iterName","createRobot","_this$state","robot","error","getTasks","logTimer","timerId","timersMap","currentBotTimers","toConsumableArray","prevState","updateLeaderBoard","botId","leaderboards","handleAssignTasks","selectedBot","bots","assignedBot","tasksClone","assignments","randomIndex","floor","splice","handleCompleteTasks","currentBot","taskIds","_loop","initiateTask","timerCancel","botsRef","bindToState","context","leadBoardRef","removeBinding","botData","components_Bot","components_CreateBotForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c806bbd8.chunk.js","sourcesContent":["export default {\n  UNIPEDAL: 'Unipedal',\n  BIPEDAL: 'Bipedal',\n  QUADRUPEDAL: 'Quadrupedal',\n  ARACHNID: 'Arachnid',\n  RADIAL: 'Radial',\n  AERONAUTICAL: 'Aeronautical'\n}","import TYPES from './enum/robotTypes'\n\n/**\n *  Made factory for create Robot objects. Made it a class in case I want to add more functions\n */\n\nclass RobotFactory {\n  constructor() {\n    this.count = 1 // not used\n  }\n\n  createRobot({id, name, type, tasks}) {    \n    if (typeof name !== 'string' || typeof type !== 'string') {\n      throw new Error('Name must be string, type must be number')\n    }\n\n    if(!TYPES[type]) {\n      throw new Error('Did not provide valid robot type')\n    }\n    \n    const robot = new Robot({id, name, type, tasks})\n\n    return robot\n  }\n}\n\nclass Robot {\n  constructor({id, name, type, tasks}) {\n    this.id = id\n    this.name = name\n    this.type = type\n    this.taskCount = tasks ? Object.keys(tasks).length : 0\n    this.tasks = tasks || {}\n  }\n\n  assignTasks(tasksArr) {\n    if(!Array.isArray(tasksArr)) {\n      throw new Error('assignTask expects to be passed an array')\n    }\n\n    for (let i = 0; i < tasksArr.length; i++) {\n      const task = tasksArr[i];\n      const key = `task-${this.taskCount}`\n      if(!this.tasks) {\n        this.tasks = {}\n      }\n      this.tasks[key] = task\n      this.taskCount++\n    }    \n\n    return this.tasks\n  }\n\n  isValidTask(taskObj) {\n    if(taskObj.types && Array.isArray(taskObj.types)) {\n      return taskObj.types.indexOf(this.type) >= 0\n    } \n    throw new Error('Invalid robot type object given')\n  }\n\n  initiateTask(taskId, cb) {    \n    const task = {...this.tasks[taskId]}\n\n    //check if given invalid tasks\n    if(task.types && Array.isArray(task.types)) {\n      console.log(this.type, task.types)\n      const valid = task.types.indexOf(this.type) >= 0\n  \n      if(!valid) {\n        this.tasks[taskId] = null\n        this.taskCount--\n        return cb(new Error('Invalid task for robot type'))\n      }\n    }\n\n    const timerId = setTimeout(() => {\n      this.tasks[taskId] = null\n      this.taskCount--\n    }, task.eta)\n    \n    //callback passed timer id for possible use\n    cb(null, timerId)\n  }\n}\n\nexport default RobotFactory","import React from 'react'\nimport TYPES from '../enum/robotTypes'\n\nconst RobotTypeSelect = (props) => {\n  const options = Object.keys(TYPES).map(key =>\n    <option key={key} value={key}>{TYPES[key]}</option>  \n  )\n\n  return (\n    <div className=\"select is-rounded\">\n      <select onChange={props.handleChange} value={props.value}>\n        {options}\n      </select>\n    </div>\n  )\n}\n\nexport default RobotTypeSelect","import React from 'react'\nimport RobotTypeSelect from './RobotTypeSelect'\n\nconst CreateBotForm = (props) => {\n  return (\n    <div className=\"create-bot-form\">\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <label className=\"label\" htmlFor=\"robotName\">Robot name</label>\n          <input \n            type=\"text\" \n            className=\"input is-rounded\"\n            placeholder=\"required\"\n            value={props.robotName}\n            onChange={props.handleInputChange}\n            name=\"robotName\" />\n          {\n            props.showRequired &&\n            <div className=\"control\">\n              <div className=\"tag is-danger\">A name for the robot is required.</div>\n            </div>\n          }\n        </div>\n        <div className=\"control\">\n          <label className=\"label\" htmlFor=\"robotType\">Robot type</label>\n          <RobotTypeSelect\n            value={props.robotType}\n            handleChange={props.handleSelectChange} />\n        </div>\n        <div className=\"control\">\n          <label className=\"label\" htmlFor=\"robotAmnt\">Number of robots</label>\n          <input \n            type=\"number\"\n            className=\"input is-rounded\"\n            value={props.robotAmnt}\n            onChange={props.handleInputChange}\n            name=\"robotAmnt\" />\n        </div>\n        <div className=\"control\">\n          <button \n            className=\"button is-rounded\"\n            onClick={props.handleClick}>Create Bot</button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default CreateBotForm","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\n\nvar _ref =\n/*#__PURE__*/\nReact.createElement(\"g\", {\n  className: \"robot\"\n}, React.createElement(\"rect\", {\n  className: \"robot-head\",\n  id: \"Rectangle\",\n  x: 0.5,\n  y: 46.5,\n  width: 105,\n  height: 58,\n  rx: 8\n}), React.createElement(\"circle\", {\n  className: \"robot-eyes\",\n  id: \"Oval\",\n  cx: 30.5,\n  cy: 73.5,\n  r: 15.5\n}), React.createElement(\"circle\", {\n  className: \"robot-eyes\",\n  id: \"Oval-Copy\",\n  cx: 76.5,\n  cy: 73.5,\n  r: 15.5\n}), React.createElement(\"path\", {\n  className: \"robot-antenna-shaft\",\n  d: \"M51.012829,13.5 L49.5230812,46.5 L56.0664924,46.5 L54.2813667,13.5 L51.012829,13.5 Z\",\n  id: \"Rectangle\"\n}), React.createElement(\"circle\", {\n  className: \"robot-antenna-tip\",\n  id: \"Oval\",\n  cx: 53,\n  cy: 7,\n  r: 7\n}));\n\nvar SvgComponent = function SvgComponent(props) {\n  return React.createElement(\"svg\", _extends({\n    className: \"robot-svg\",\n    height: 106,\n    width: 106,\n    version: 1.1,\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\"\n  }, props), _ref);\n};\n\nexport default __webpack_public_path__ + \"static/media/robot.0d5b9c78.svg\";\nexport { SvgComponent as ReactComponent };","import React, { Component } from 'react'\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faRobot } from '@fortawesome/free-solid-svg-icons'\nimport { ReactComponent as Robot } from '../robot.svg'\n\nclass Bot extends Component {\n  state = {\n    showLeaderBoard: false\n  }\n\n  showLeaderBoard = () => {\n    this.setState({ showLeaderBoard: true })\n  }\n\n  hideLeaderBoard = () => {\n    this.setState({ showLeaderBoard: false })\n  }\n\n  render() {\n    const { data } = this.props\n    const taskKeys = Object.keys(data.tasks)\n\n    // filter out tasks set to null to avoid errors in \n    const notNullKeys = taskKeys.filter((key) => {\n      return data.tasks[key]\n    })\n    \n    const tasksList = notNullKeys.map(key => {\n      const task = data.tasks[key]\n      let bubbleText = task.description\n      let bubbleClass = \"task-bubble\"\n      let animationName = \"bubble\"\n      if(task.types && !data.isValidTask(task)) {\n        bubbleText = \"DOES NOT COMPUTE!!\"\n        bubbleClass += \" invalid\"\n        animationName = \"invalid-bubble\"\n      }\n\n      return (\n        <CSSTransition\n          key={key}\n          classNames={animationName}\n          timeout={2000}>\n          <div className={bubbleClass}>\n            {bubbleText}\n          </div>\n        </CSSTransition>)\n    })\n\n    let leaderboard = []\n    \n    if(this.props.leaderboard) {\n      leaderboard = Object.keys(this.props.leaderboard).map(key => \n        <p key={key}>{`${key} : ${this.props.leaderboard[key]}`}</p>\n      )\n    }\n        \n    return (\n      <div className=\"column is-one-third\">\n        <div className=\"contain-bot\">\n          {\n            this.state.showLeaderBoard &&\n            <div className=\"leaderboard\">\n              {leaderboard}\n              <button \n                className=\"button\"\n                onClick={this.hideLeaderBoard}>\n                Close\n              </button>\n            </div>\n          }\n          {\n            !this.state.showLeaderBoard &&\n            <div className=\"robot\">\n              <div className=\"robot__info\">\n                <Robot />\n                <span className=\"robot__taskCount\">{data.taskCount} task(s) remaining</span>\n                <span className=\"robot__name\">{data.name}</span>\n                <div className=\"robot__type\">{data.type}</div>\n                <TransitionGroup>\n                  {tasksList}\n                </TransitionGroup>\n              </div>\n              <div className=\"robot__actions\">\n                {\n                  (tasksList.length > 0) &&\n                  <button \n                    className=\"button\"\n                    onClick={() => this.props.completeTasks(this.props.id)}>\n                    Start\n                  </button>\n                }\n                {\n                  !tasksList.length && \n                  <button \n                    className=\"button\"\n                    onClick={() => this.props.assignTasks(this.props.id)}>\n                    More tasks\n                  </button>\n                }\n                <button \n                  className=\"button\"\n                  onClick={() => this.props.deleteRobot(this.props.id)}>\n                  Deactivate\n                </button>\n                <button \n                  className=\"button\"\n                  onClick={this.showLeaderBoard}>\n                  Leaderboard\n                </button>\n              </div>\n            </div>\n          }\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Bot;","import Rebase from 're-base'\nimport firebase from 'firebase'\n\nconst firebaseApp = firebase.initializeApp({\n  apiKey: \"AIzaSyC3V78MLFGnyxxLI2X11lvpC4IoRjCef5Y\",\n  authDomain: \"bot-o-mat.firebaseapp.com\",\n  databaseURL: \"https://bot-o-mat.firebaseio.com\",\n});\n\nconst base = Rebase.createClass(firebaseApp.database());\n\nexport { firebaseApp };\n\nexport default base;","export default [\n  {\n    description: 'do the dishes',\n    eta: 1000,\n  },{\n    description: 'sweep the house',\n    eta: 3000,\n  },{\n    description: 'do the laundry',\n    eta: 10000,\n  },{\n    description: 'take out the recycling',\n    eta: 4000,\n  },{\n    description: 'make a sammich',\n    eta: 7000,\n  },{\n    description: 'mow the lawn',\n    eta: 20000,\n  },{\n    description: 'rake the leaves',\n    eta: 18000,\n  },{\n    description: 'give the dog a bath',\n    eta: 14500,\n  },{\n    description: 'bake some cookies',\n    eta: 8000,\n  },{\n    description: 'wash the car',\n    eta: 20000,\n  },{\n    description: 'balance dishes on head',\n    eta: 2500,\n    types: ['UNPEDAL', 'BIPEDAL', 'QUADRUPEDAL', 'ARACHNID']\n  },{\n    description: 'spin a web',\n    eta: 4000,\n    types: ['ARACHNID']\n  },{\n    description: 'break the sound barrier',\n    eta: 6000,\n    types: ['AERONAUTICAL']\n  },{\n    description: 'climb up tree',\n    eta: 3500,\n    types: ['BIPEDAL', 'ARACHNID']\n  },{\n    description: 'travel overseas',\n    eta: 30000,\n    types: ['AERONAUTICAL']\n  },{\n    description: 'crochet a scarf',\n    eta: 7000,\n    types: ['ARACHNID']\n  },{\n    description: 'make a soccer goal',\n    eta: 4000,\n    types: ['BIPEDAL', 'ARACHNID']\n  },{\n    description: 'paint driveway',\n    eta: 20000,\n    types: ['RADIAL'] \n  },{\n    description: 'rock climb up a cliff',\n    eta: 40000,\n    type: ['BIPEDAL', 'QUADRUPEDAL', 'ARACHNID']\n  }\n\n]","import React, { Component } from 'react';\nimport RobotFactory from './robot'\nimport CreateBotForm from './components/CreateBotForm'\nimport Bot from './components/Bot'\nimport base from './base'\nimport './App.css';\nimport tasks from './enum/tasks'\n\nconst Factory = new RobotFactory()\n\nconst ID = function () {\n  // Math.random should be unique because of its seeding algorithm.\n  // Convert it to base 36 (numbers + letters), and grab the first 9 characters\n  // after the decimal.\n  return '_' + Math.random().toString(36).substr(2, 9);\n};\n\nclass App extends Component {\n  constructor() {\n    super()\n\n    this.state = {\n      robotName: '',\n      robotType: 'UNIPEDAL',\n      robotAmnt: 1,\n      showRequired: false,\n      timers: {},\n      bots:{},\n      leaderboards: {}\n    }\n  }\n\n  componentDidMount() {\n    /** bind Firebase endpoints to respective endpoints in component state  */\n\n    this.botsRef = base.bindToState('bots', {\n      context: this,\n      state: 'bots'\n    })\n\n    this.leadBoardRef = base.bindToState('leaderboards', {\n      context: this,\n      state: 'leaderboards'\n    })\n  }\n\n  componentWillUnmount() {\n    base.removeBinding(this.botsRef)\n    base.removeBinding(this.leadBoardRef)\n  }\n\n  /** push bot data to bots endpoint in firebase */\n\n  addBot = (botObj) => {\n    const fbRef = base.push('bots', {\n      data: botObj,\n      then(err) {\n        if(!err) {\n          return false\n        }\n      }\n    })\n    const botKey = fbRef.key // get firebase key for bot data\n\n    /** initialize empty slots for assigned task in leaderboard endpoint */\n    \n    const tasks = {}\n\n    for(let key in botObj.tasks) {\n      tasks[botObj.tasks[key].description] = 0\n    }\n\n    base.update(`leaderboards`, {\n      data: {\n        [botKey] : tasks\n      },\n      then(err) {\n        if(!err) {\n          return false\n        }\n      }\n    })\n\n    /** initilized empty slot for timer logging */\n\n    const timers = {...this.state.timers}\n    timers[botKey] = []\n\n    this.setState({ timers })\n  }\n\n  deleteBot = (id) => {    \n    base.remove(`bots/${id}`, (err) => {\n      if(!err) {\n        return false\n      }\n    })\n\n    base.remove(`leaderboards/${id}`, (err) => {\n      if(!err) {\n        return false\n      }\n    })\n  }\n\n  updateBot = (id, data) => {\n    base.update(`bots/${id}`, {\n      data: data,\n      then(err) {\n        if(!err) {\n          return false\n        }\n      }\n    })\n  }\n\n  handleInputChange = (e) => {\n    const name = e.target.name\n\n    this.setState({\n      [name] : e.target.value\n    })\n  }\n\n  handleSelectChange = (e) => {\n    this.setState({ robotType: e.target.value })\n  }\n\n  handleCreateFormSubmit = () => {\n    // simple form validation\n    if(!this.state.robotName) {\n      this.setState({ showRequired : true })\n      return false\n    } else {\n      this.setState({ showRequired : false })\n    }\n\n    if(this.state.robotAmnt > 1) {   // if user wants to make multiple robots\n      const name = this.state.robotName\n      for (let i = 0; i < this.state.robotAmnt; i++) {\n        const iterName = `${name}${ID()}` // append string hash to name given for each robot\n        this.createRobot(iterName, this.state.robotType)\n      }\n    } else { \n      const { robotName, robotType } = this.state\n      this.createRobot(robotName, robotType)\n    }\n\n    /** reset form to default */\n    this.setState({\n      robotName: '',\n      robotType: 'UNIPEDAL',\n      robotAmnt: 1\n    })\n  }\n\n  createRobot = (name, type) => {\n    let robot;\n  \n    try { // createRobot throws error if given invalid data\n      robot = Factory.createRobot({\n        name: name, \n        type: type,\n        id: `bot${ID()}`\n      })\n    } catch (error) {\n      console.log(error)\n    }\n\n    if(robot) {\n      try {\n        robot.assignTasks(this.getTasks())\n        this.addBot(robot)\n      } catch (error) {\n        console.log(error);\n      }\n    } else {\n      console.log('Could not create robot');\n    }\n  }\n\n  /** attempt to log timers for each bot so that they can be canceled when robot is deleted */\n\n  logTimer = (botKey, timerId) => {\n    const timersMap = {...this.state.timers}\n    let currentBotTimers = [...timersMap[botKey]]\n    currentBotTimers.push(timerId)\n    timersMap[botKey] = currentBotTimers\n\n    this.setState((prevState, props) => {\n      return { timers: timersMap } \n    })\n  }\n\n  updateLeaderBoard = (botId, task) => {\n    let update = 1\n    \n    if(this.state.leaderboards[botId][task.description]) {\n      update = this.state.leaderboards[botId][task.description] + 1\n    }\n\n    base.update(`leaderboards/${botId}`, {\n      data: {\n        [task.description] : update\n      },\n      then(err) {\n        if(!err) {}\n      }\n    })\n  }\n\n  handleAssignTasks = (id) => {\n    const bots = {...this.state.bots}\n    const selectedBot = bots[id]\n    if(!selectedBot.tasks) {\n      selectedBot.tasks = {}\n    }\n    const assignedBot = Factory.createRobot(selectedBot)\n    assignedBot.assignTasks(this.getTasks())    \n    this.updateBot(id, assignedBot)\n  }\n\n  /** choose 5 tasks from tasklist and return them in an array */\n\n  getTasks = () => {\n    const tasksClone = [...tasks]\n    const assignments = []\n\n    for (let i = 0; i < 5; i++) {\n      const randomIndex = Math.floor(Math.random() * tasksClone.length)\n      assignments.push(tasksClone.splice(randomIndex, 1)[0])\n    }\n\n    return assignments\n  }\n\n  handleCompleteTasks = (botKey) => {\n    const bots = {...this.state.bots}\n    const currentBot = Factory.createRobot(bots[botKey])\n    \n    const taskIds = Object.keys(currentBot.tasks)\n    const tasks = {...currentBot.tasks}\n\n    for (let i = 0; i < taskIds.length; i++) {\n      currentBot.initiateTask(taskIds[i], (err, timerCancel) => {  \n        if(err) {\n          // clearTimeout(timerCancel) // clear all timeouts for invalid tasks\n          setTimeout(() => {        \n            this.updateBot(botKey, currentBot)\n          }, 0)\n          console.log(`${currentBot.name} can't ${tasks[taskIds[i]].description}`)\n          return false\n        }\n        \n        // this.logTimer(botKey, timerCancel)\n\n        this.updateLeaderBoard(botKey, tasks[taskIds[i]])\n      })\n\n      /** match timeout set inside Robot.initiateTask() */\n      setTimeout(() => {        \n        this.updateBot(botKey, currentBot)\n      }, tasks[taskIds[i]].eta)\n    }\n  }\n\n  render() {\n    const bots = Object.keys(this.state.bots).map((key) => {\n      const botData = this.state.bots[key]\n      return (\n        <Bot \n          key={key}\n          id={key}\n          data={Factory.createRobot(botData)}\n          leaderboard={this.state.leaderboards[key]}\n          deleteRobot={this.deleteBot}\n          handleInputChange={this.handleInputChange}\n          completeTasks={this.handleCompleteTasks}\n          assignTasks={this.handleAssignTasks} />\n      )\n    })\n\n    return (\n      <div className=\"App\">\n        <div className=\"topbar\">\n          <CreateBotForm \n            robotType={this.state.robotType}\n            robotName={this.state.robotName}\n            robotAmnt={this.state.robotAmnt}\n            showRequired={this.state.showRequired}\n            handleClick={this.handleCreateFormSubmit}\n            handleInputChange={this.handleInputChange}\n            handleSelectChange={this.handleSelectChange} />\n        </div>\n        <div className=\"contain-bots\">\n          <div className=\"columns is-gapless is-multiline\">\n            {bots}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}